node(label:'dsp-jenkins-infra-validation')
{
   // clean the workdir
   cleanWs()
   //variables -def
   def daaClientScenariosRepo = "dsp_daa_fhir_layering"
   def branchName="Docspera_Automated_Test"
   def credentialId_aperuma = "c266e724-5d09-46f2-80cc-dbf71d996337"
   def credentialId_vumashan = "29571386410-29571386410-29571386410"
   def credentialId_dnethaji = "9e0a53bb-88d6-4697-b846-f1bcd55be9eb"
   sh"python3.7   -V"

   stage('Checkout the code from bitbucket') {

      //select the username for bitbucket access
      switch (params.UserName) {
         case "aperuma":
            print "using credentials of user ${params.UserName}, credential assigned"
            credential_id = "${credentialId_aperuma}"
            break

         case "dnethaji":
            print "using credentials of user ${params.UserName}, credential assigned"
            credential_id = "${credentialId_dnethaji}"
            break
    
         case "vumashan":
            print "using credentials of user ${params.UserName}, credential assigned"
            credential_id = "${credentialId_vumashan}"
            break
     
         default:
            print "INVALID USERNAME"
            sh "exit 1"
      }

      //checkout from bitbucket
      dir (daaClientScenariosRepo){
            git credentialsId: credential_id, branch:"${branchName}", url: "https://sourcecode.jnj.com/scm/asx-nayl/${daaClientScenariosRepo}.git"
            print "Pulled out the from bitbucket, from the repo ${daaClientScenariosRepo}"
      }
   }

   stage('API Test Execution'){

      //install the requirements
      dir ("${daaClientScenariosRepo}"){
			print "test ${env.WORKSPACE}"
			sh (script: 'sudo curl "https://bootstrap.pypa.io/pip/2.7/get-pip.py" -o "get-pip.py"')
            sh (script: 'sudo python3.7 get-pip.py')
			sh (script:'sudo apt install -y chromium-browser')
            sh (script:'sudo apt install unzip')
			sh (script:'wget https://chromedriver.storage.googleapis.com/111.0.5563.64/chromedriver_linux64.zip')
			sh (script:'unzip chromedriver_linux64.zip')
			sh (script:'chmod +x chromedriver')
			sh('sudo mv ./chromedriver  /usr/bin/')
			//chmod 777 chromedriver
			//google-chrome --version
			//ls -al .
			sh (script: 'pip install selenium==4.8.2')
			//echo Groovy script execution completed	
      }   
      // move to workspace dir
      sh(script:"sudo chmod 775  ${daaClientScenariosRepo}")
      dir(daaClientScenariosRepo){
            print "test ${env.WORKSPACE}"
            def test_execution = sh(script:'python3.7 /home/agentadmin/workspace/okta_pkce_automation/dsp_daa_fhir_layering/okta_pkce/OKTAtoken.py',  returnStatus: true)
			sh "echo ${test_execution}"
			if (test_execution != 0){
			catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
					// sh "exit 1"
			}
      }   
   }
   }

//   stage('Publish the Html Report'){

//      publishHTML(
 //     [allowMissing: false, 
 //     alwaysLinkToLastBuild: false, 
//      keepAll: true, 
 //     reportDir: pwd()+'/HtmlReport/', 
//      reportFiles: '*.html', 
//      reportName: 'HTML Report', 
//      reportTitles: 'DocsperaEHR_Report'
//     ])


 //  }

}